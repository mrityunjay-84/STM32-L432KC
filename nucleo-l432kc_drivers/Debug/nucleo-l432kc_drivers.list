
nucleo-l432kc_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000988  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b1c  08000b24  00001b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b1c  08000b1c  00001b24  2**0
                  CONTENTS
  4 .ARM          00000000  08000b1c  08000b1c  00001b24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b1c  08000b24  00001b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b1c  08000b1c  00001b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b20  08000b20  00001b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001b24  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001337  00000000  00000000  00001b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c6  00000000  00000000  00002e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d8  00000000  00000000  00003480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002500  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a76  00000000  00000000  00005a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009370  00000000  00000000  000074ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001083e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000404  00000000  00000000  00010884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00010c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000b04 	.word	0x08000b04

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000b04 	.word	0x08000b04

080001d4 <delay>:
 * SPI3_MISO	PB4		D12
 * SPI3_MOSI	PB5		D11
 */

/* SOFTWARE DELAY */
void delay(){
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 0xFFFF; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80001ec:	4293      	cmp	r3, r2
 80001ee:	d9f7      	bls.n	80001e0 <delay+0xc>
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr

080001fc <SPI_GPIOConfig>:

void SPI_GPIOConfig(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPI1Pins;

	SPI1Pins.pGPIOx = GPIOA;
 8000202:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000206:	60fb      	str	r3, [r7, #12]
	SPI1Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000208:	2302      	movs	r3, #2
 800020a:	747b      	strb	r3, [r7, #17]
	SPI1Pins.GPIO_PinConfig.GPIO_PinOpSpeed = GPIO_OPSPEED_LOW;
 800020c:	2300      	movs	r3, #0
 800020e:	74bb      	strb	r3, [r7, #18]
	SPI1Pins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OPTYPE_PUSHPULL;
 8000210:	2300      	movs	r3, #0
 8000212:	74fb      	strb	r3, [r7, #19]
	SPI1Pins.GPIO_PinConfig.GPIO_PinPUPD = GPIO_PUPD_NOPUPD;
 8000214:	2300      	movs	r3, #0
 8000216:	753b      	strb	r3, [r7, #20]
	SPI1Pins.GPIO_PinConfig.GPIO_PinAltFun = GPIO_ALTFUN_5;
 8000218:	2305      	movs	r3, #5
 800021a:	757b      	strb	r3, [r7, #21]

	// enable clock to GPIO port A
	GPIO_PeriClockControl(GPIOA, ENABLE);
 800021c:	2101      	movs	r1, #1
 800021e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000222:	f000 f927 	bl	8000474 <GPIO_PeriClockControl>
//	// NSS Pin
//	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_4;
//	GPIO_Init(&SPI1Pins);

	// SCLK Pin
	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_5;
 8000226:	2305      	movs	r3, #5
 8000228:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&SPI1Pins);
 800022a:	f107 030c 	add.w	r3, r7, #12
 800022e:	4618      	mov	r0, r3
 8000230:	f000 f98e 	bl	8000550 <GPIO_Init>

	// MISO Pin
	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_6;
 8000234:	2306      	movs	r3, #6
 8000236:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&SPI1Pins);
 8000238:	f107 030c 	add.w	r3, r7, #12
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f987 	bl	8000550 <GPIO_Init>

	// MOSI Pin
	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_7;
 8000242:	2307      	movs	r3, #7
 8000244:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&SPI1Pins);
 8000246:	f107 030c 	add.w	r3, r7, #12
 800024a:	4618      	mov	r0, r3
 800024c:	f000 f980 	bl	8000550 <GPIO_Init>



	GPIO_Handle_t SPI2Pins;

	SPI2Pins.pGPIOx = GPIOB;
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <SPI_GPIOConfig+0xa0>)
 8000252:	603b      	str	r3, [r7, #0]
	SPI2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000254:	2302      	movs	r3, #2
 8000256:	717b      	strb	r3, [r7, #5]
	SPI2Pins.GPIO_PinConfig.GPIO_PinOpSpeed = GPIO_OPSPEED_LOW;
 8000258:	2300      	movs	r3, #0
 800025a:	71bb      	strb	r3, [r7, #6]
	SPI2Pins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OPTYPE_PUSHPULL;
 800025c:	2300      	movs	r3, #0
 800025e:	71fb      	strb	r3, [r7, #7]
	SPI2Pins.GPIO_PinConfig.GPIO_PinPUPD = GPIO_PUPD_NOPUPD;
 8000260:	2300      	movs	r3, #0
 8000262:	723b      	strb	r3, [r7, #8]
	SPI2Pins.GPIO_PinConfig.GPIO_PinAltFun = GPIO_ALTFUN_6;
 8000264:	2306      	movs	r3, #6
 8000266:	727b      	strb	r3, [r7, #9]

	// enable clock to GPIO port A
	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000268:	2101      	movs	r1, #1
 800026a:	480c      	ldr	r0, [pc, #48]	@ (800029c <SPI_GPIOConfig+0xa0>)
 800026c:	f000 f902 	bl	8000474 <GPIO_PeriClockControl>
//	// NSS Pin -> deliberately SPI1Pins bcz it is present on PA15
//	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_15;
//	GPIO_Init(&SPI1Pins);

	// SCLK Pin
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_3;
 8000270:	2303      	movs	r3, #3
 8000272:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPI2Pins);
 8000274:	463b      	mov	r3, r7
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f96a 	bl	8000550 <GPIO_Init>

	// MISO Pin
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_4;
 800027c:	2304      	movs	r3, #4
 800027e:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPI2Pins);
 8000280:	463b      	mov	r3, r7
 8000282:	4618      	mov	r0, r3
 8000284:	f000 f964 	bl	8000550 <GPIO_Init>

	// MOSI Pin
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_5;
 8000288:	2305      	movs	r3, #5
 800028a:	713b      	strb	r3, [r7, #4]
	GPIO_Init(&SPI2Pins);
 800028c:	463b      	mov	r3, r7
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f95e 	bl	8000550 <GPIO_Init>
}
 8000294:	bf00      	nop
 8000296:	3718      	adds	r7, #24
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	48000400 	.word	0x48000400

080002a0 <SPI_Config>:

void SPI_Config(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI_Handle1;

	SPI_Handle1.pSPIx = SPI1;
 80002a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000310 <SPI_Config+0x70>)
 80002a8:	60fb      	str	r3, [r7, #12]
	SPI_Handle1.SPI_PinConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002aa:	2301      	movs	r3, #1
 80002ac:	743b      	strb	r3, [r7, #16]
	SPI_Handle1.SPI_PinConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL_DUPLX;
 80002ae:	2300      	movs	r3, #0
 80002b0:	747b      	strb	r3, [r7, #17]
	SPI_Handle1.SPI_PinConfig.SPI_DS = SPI_DS_8_BIT;
 80002b2:	2307      	movs	r3, #7
 80002b4:	74bb      	strb	r3, [r7, #18]
	SPI_Handle1.SPI_PinConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002b6:	2300      	movs	r3, #0
 80002b8:	74fb      	strb	r3, [r7, #19]
	SPI_Handle1.SPI_PinConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ba:	2300      	movs	r3, #0
 80002bc:	753b      	strb	r3, [r7, #20]
	SPI_Handle1.SPI_PinConfig.SPI_SSM = SPI_SSM_EN;
 80002be:	2301      	movs	r3, #1
 80002c0:	757b      	strb	r3, [r7, #21]
	SPI_Handle1.SPI_PinConfig.SPI_BDRCtrl = SPI_BDR_CTRL_DIV_2;
 80002c2:	2300      	movs	r3, #0
 80002c4:	75bb      	strb	r3, [r7, #22]

	// enable clock to SPI1 peripheral
	SPI_PeriClockControl(SPI1, ENABLE);
 80002c6:	2101      	movs	r1, #1
 80002c8:	4811      	ldr	r0, [pc, #68]	@ (8000310 <SPI_Config+0x70>)
 80002ca:	f000 fa9f 	bl	800080c <SPI_PeriClockControl>

	SPI_Init(&SPI_Handle1);
 80002ce:	f107 030c 	add.w	r3, r7, #12
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fada 	bl	800088c <SPI_Init>



	SPI_Handle_t SPI_Handle2;

	SPI_Handle2.pSPIx = SPI3;
 80002d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000314 <SPI_Config+0x74>)
 80002da:	603b      	str	r3, [r7, #0]
	SPI_Handle2.SPI_PinConfig.SPI_DeviceMode = SPI_DEVICE_MODE_SLAVE;
 80002dc:	2300      	movs	r3, #0
 80002de:	713b      	strb	r3, [r7, #4]
	SPI_Handle2.SPI_PinConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL_DUPLX;
 80002e0:	2300      	movs	r3, #0
 80002e2:	717b      	strb	r3, [r7, #5]
	SPI_Handle2.SPI_PinConfig.SPI_DS = SPI_DS_8_BIT;
 80002e4:	2307      	movs	r3, #7
 80002e6:	71bb      	strb	r3, [r7, #6]
	SPI_Handle2.SPI_PinConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002e8:	2300      	movs	r3, #0
 80002ea:	71fb      	strb	r3, [r7, #7]
	SPI_Handle2.SPI_PinConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ec:	2300      	movs	r3, #0
 80002ee:	723b      	strb	r3, [r7, #8]
	SPI_Handle2.SPI_PinConfig.SPI_SSM = SPI_SSM_EN;
 80002f0:	2301      	movs	r3, #1
 80002f2:	727b      	strb	r3, [r7, #9]
	SPI_Handle2.SPI_PinConfig.SPI_BDRCtrl = SPI_BDR_CTRL_DIV_2;
 80002f4:	2300      	movs	r3, #0
 80002f6:	72bb      	strb	r3, [r7, #10]

	// enable clock to SPI1 peripheral
	SPI_PeriClockControl(SPI3, ENABLE);
 80002f8:	2101      	movs	r1, #1
 80002fa:	4806      	ldr	r0, [pc, #24]	@ (8000314 <SPI_Config+0x74>)
 80002fc:	f000 fa86 	bl	800080c <SPI_PeriClockControl>

	SPI_Init(&SPI_Handle2);
 8000300:	463b      	mov	r3, r7
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fac2 	bl	800088c <SPI_Init>

}
 8000308:	bf00      	nop
 800030a:	3718      	adds	r7, #24
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	40013000 	.word	0x40013000
 8000314:	40003c00 	.word	0x40003c00

08000318 <main>:

int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
	uint8_t dummyWrite = 0x45;	// E
 800031e:	2345      	movs	r3, #69	@ 0x45
 8000320:	71fb      	strb	r3, [r7, #7]
	uint8_t dummyRead;
	uint8_t read;
	uint8_t MasterSend = 0x4d;	// M
 8000322:	234d      	movs	r3, #77	@ 0x4d
 8000324:	717b      	strb	r3, [r7, #5]
	uint8_t SlaveSend = 0x53;	// S
 8000326:	2353      	movs	r3, #83	@ 0x53
 8000328:	713b      	strb	r3, [r7, #4]

	// configure the GPIO pins to behave as SPI pins
	SPI_GPIOConfig();
 800032a:	f7ff ff67 	bl	80001fc <SPI_GPIOConfig>

	// configure the parameter of SPI1 peripheral and SPI2 Peripheral
	SPI_Config();
 800032e:	f7ff ffb7 	bl	80002a0 <SPI_Config>

	// SET SSI bit of SPI1, avoid MODF error
	SPI_SSIConfig(SPI1, ENABLE);
 8000332:	2101      	movs	r1, #1
 8000334:	4838      	ldr	r0, [pc, #224]	@ (8000418 <main+0x100>)
 8000336:	f000 fba6 	bl	8000a86 <SPI_SSIConfig>

	// RESET SSI bit of SPI3
	SPI_SSIConfig(SPI3, DISABLE);
 800033a:	2100      	movs	r1, #0
 800033c:	4837      	ldr	r0, [pc, #220]	@ (800041c <main+0x104>)
 800033e:	f000 fba2 	bl	8000a86 <SPI_SSIConfig>

	while(1){
		delay();
 8000342:	f7ff ff47 	bl	80001d4 <delay>

		// enable the SPI1 peripheral
		SPI_PeripheralControl(SPI1, ENABLE);
 8000346:	2101      	movs	r1, #1
 8000348:	4833      	ldr	r0, [pc, #204]	@ (8000418 <main+0x100>)
 800034a:	f000 fb81 	bl	8000a50 <SPI_PeripheralControl>

		// enable the SPI3 peripheral
		SPI_PeripheralControl(SPI3, ENABLE);
 800034e:	2101      	movs	r1, #1
 8000350:	4832      	ldr	r0, [pc, #200]	@ (800041c <main+0x104>)
 8000352:	f000 fb7d 	bl	8000a50 <SPI_PeripheralControl>



		// MASTER sends data + cycle
		SPI_SendData(SPI1, &MasterSend, 1);		// M - 0
 8000356:	1d7b      	adds	r3, r7, #5
 8000358:	2201      	movs	r2, #1
 800035a:	4619      	mov	r1, r3
 800035c:	482e      	ldr	r0, [pc, #184]	@ (8000418 <main+0x100>)
 800035e:	f000 faec 	bl	800093a <SPI_SendData>
		// master reads data
		SPI_ReceiveData(SPI1, &dummyRead, 1);
 8000362:	1dbb      	adds	r3, r7, #6
 8000364:	2201      	movs	r2, #1
 8000366:	4619      	mov	r1, r3
 8000368:	482b      	ldr	r0, [pc, #172]	@ (8000418 <main+0x100>)
 800036a:	f000 fb22 	bl	80009b2 <SPI_ReceiveData>

		// slave reads data in buffer
		SPI_ReceiveData(SPI3, &dummyRead, 1);
 800036e:	1dbb      	adds	r3, r7, #6
 8000370:	2201      	movs	r2, #1
 8000372:	4619      	mov	r1, r3
 8000374:	4829      	ldr	r0, [pc, #164]	@ (800041c <main+0x104>)
 8000376:	f000 fb1c 	bl	80009b2 <SPI_ReceiveData>
		// slave puts data in buffer
		SPI_SendData(SPI3, &dummyWrite, 1);
 800037a:	1dfb      	adds	r3, r7, #7
 800037c:	2201      	movs	r2, #1
 800037e:	4619      	mov	r1, r3
 8000380:	4826      	ldr	r0, [pc, #152]	@ (800041c <main+0x104>)
 8000382:	f000 fada 	bl	800093a <SPI_SendData>




		// MASTER sends data + cycle
		SPI_SendData(SPI1, &dummyWrite, 1);		// E - E
 8000386:	1dfb      	adds	r3, r7, #7
 8000388:	2201      	movs	r2, #1
 800038a:	4619      	mov	r1, r3
 800038c:	4822      	ldr	r0, [pc, #136]	@ (8000418 <main+0x100>)
 800038e:	f000 fad4 	bl	800093a <SPI_SendData>
		// master reads data
		SPI_ReceiveData(SPI1, &dummyRead, 1);
 8000392:	1dbb      	adds	r3, r7, #6
 8000394:	2201      	movs	r2, #1
 8000396:	4619      	mov	r1, r3
 8000398:	481f      	ldr	r0, [pc, #124]	@ (8000418 <main+0x100>)
 800039a:	f000 fb0a 	bl	80009b2 <SPI_ReceiveData>

		// slave reads data in buffer
		SPI_ReceiveData(SPI3, &dummyRead, 1);
 800039e:	1dbb      	adds	r3, r7, #6
 80003a0:	2201      	movs	r2, #1
 80003a2:	4619      	mov	r1, r3
 80003a4:	481d      	ldr	r0, [pc, #116]	@ (800041c <main+0x104>)
 80003a6:	f000 fb04 	bl	80009b2 <SPI_ReceiveData>
		// slave puts data in buffer
		SPI_SendData(SPI3, &SlaveSend, 1);
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	481a      	ldr	r0, [pc, #104]	@ (800041c <main+0x104>)
 80003b2:	f000 fac2 	bl	800093a <SPI_SendData>



		// MASTER sends data + cycle
		SPI_SendData(SPI1, &MasterSend, 1);		// M - S
 80003b6:	1d7b      	adds	r3, r7, #5
 80003b8:	2201      	movs	r2, #1
 80003ba:	4619      	mov	r1, r3
 80003bc:	4816      	ldr	r0, [pc, #88]	@ (8000418 <main+0x100>)
 80003be:	f000 fabc 	bl	800093a <SPI_SendData>
		// master reads data
		SPI_ReceiveData(SPI1, &dummyRead, 1);
 80003c2:	1dbb      	adds	r3, r7, #6
 80003c4:	2201      	movs	r2, #1
 80003c6:	4619      	mov	r1, r3
 80003c8:	4813      	ldr	r0, [pc, #76]	@ (8000418 <main+0x100>)
 80003ca:	f000 faf2 	bl	80009b2 <SPI_ReceiveData>

		// slave reads data in buffer
		SPI_ReceiveData(SPI3, &dummyRead, 1);
 80003ce:	1dbb      	adds	r3, r7, #6
 80003d0:	2201      	movs	r2, #1
 80003d2:	4619      	mov	r1, r3
 80003d4:	4811      	ldr	r0, [pc, #68]	@ (800041c <main+0x104>)
 80003d6:	f000 faec 	bl	80009b2 <SPI_ReceiveData>
		// slave puts data in buffer
		SPI_SendData(SPI3, &SlaveSend, 1);
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2201      	movs	r2, #1
 80003de:	4619      	mov	r1, r3
 80003e0:	480e      	ldr	r0, [pc, #56]	@ (800041c <main+0x104>)
 80003e2:	f000 faaa 	bl	800093a <SPI_SendData>


		//lets confirm SPI1 & SPI3 are not busy
		while(SPI_GetFlagStatus(SPI1, SPI_BUSY_FLAG));
 80003e6:	bf00      	nop
 80003e8:	2180      	movs	r1, #128	@ 0x80
 80003ea:	480b      	ldr	r0, [pc, #44]	@ (8000418 <main+0x100>)
 80003ec:	f000 fb1d 	bl	8000a2a <SPI_GetFlagStatus>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d1f8      	bne.n	80003e8 <main+0xd0>
		while(SPI_GetFlagStatus(SPI3, SPI_BUSY_FLAG));
 80003f6:	bf00      	nop
 80003f8:	2180      	movs	r1, #128	@ 0x80
 80003fa:	4808      	ldr	r0, [pc, #32]	@ (800041c <main+0x104>)
 80003fc:	f000 fb15 	bl	8000a2a <SPI_GetFlagStatus>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d1f8      	bne.n	80003f8 <main+0xe0>

		//Disable the SPI1 & SPI3 peripheral
		SPI_PeripheralControl(SPI3,DISABLE);
 8000406:	2100      	movs	r1, #0
 8000408:	4804      	ldr	r0, [pc, #16]	@ (800041c <main+0x104>)
 800040a:	f000 fb21 	bl	8000a50 <SPI_PeripheralControl>
		SPI_PeripheralControl(SPI1,DISABLE);
 800040e:	2100      	movs	r1, #0
 8000410:	4801      	ldr	r0, [pc, #4]	@ (8000418 <main+0x100>)
 8000412:	f000 fb1d 	bl	8000a50 <SPI_PeripheralControl>
		delay();
 8000416:	e794      	b.n	8000342 <main+0x2a>
 8000418:	40013000 	.word	0x40013000
 800041c:	40003c00 	.word	0x40003c00

08000420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000420:	480d      	ldr	r0, [pc, #52]	@ (8000458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000422:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000424:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	@ (800045c <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	@ (8000460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	@ (8000464 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	@ (800046c <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044e:	f000 fb35 	bl	8000abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000452:	f7ff ff61 	bl	8000318 <main>

08000456 <LoopForever>:

LoopForever:
  b LoopForever
 8000456:	e7fe      	b.n	8000456 <LoopForever>
  ldr   r0, =_estack
 8000458:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000464:	08000b24 	.word	0x08000b24
  ldr r2, =_sbss
 8000468:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800046c:	2000001c 	.word	0x2000001c

08000470 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC1_IRQHandler>
	...

08000474 <GPIO_PeriClockControl>:
 * @param[in] 	- ENABLE or DISABLE macro
 * return 		- none
 *
 * note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDis){
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	460b      	mov	r3, r1
 800047e:	70fb      	strb	r3, [r7, #3]
	if (EnorDis == ENABLE){
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	2b01      	cmp	r3, #1
 8000484:	d12b      	bne.n	80004de <GPIO_PeriClockControl+0x6a>
		if (pGPIOx == GPIOA){
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800048e:	4b2c      	ldr	r3, [pc, #176]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000492:	4a2b      	ldr	r2, [pc, #172]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	64d3      	str	r3, [r2, #76]	@ 0x4c
		}
		else if (pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800049a:	e04b      	b.n	8000534 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOB){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a29      	ldr	r2, [pc, #164]	@ (8000544 <GPIO_PeriClockControl+0xd0>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80004a4:	4b26      	ldr	r3, [pc, #152]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 80004a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a8:	4a25      	ldr	r2, [pc, #148]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 80004aa:	f043 0302 	orr.w	r3, r3, #2
 80004ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004b0:	e040      	b.n	8000534 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOC){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a24      	ldr	r2, [pc, #144]	@ (8000548 <GPIO_PeriClockControl+0xd4>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_PeriClockControl+0x54>
			GPIOA_PCLK_EN();
 80004ba:	4b21      	ldr	r3, [pc, #132]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 80004bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004be:	4a20      	ldr	r2, [pc, #128]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004c6:	e035      	b.n	8000534 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOH){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a20      	ldr	r2, [pc, #128]	@ (800054c <GPIO_PeriClockControl+0xd8>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d131      	bne.n	8000534 <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_EN();
 80004d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 80004d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 80004d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004da:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004dc:	e02a      	b.n	8000534 <GPIO_PeriClockControl+0xc0>
		if (pGPIOx == GPIOA){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80004e4:	d106      	bne.n	80004f4 <GPIO_PeriClockControl+0x80>
			GPIOA_PCLK_DI();
 80004e6:	4b16      	ldr	r3, [pc, #88]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ea:	4a15      	ldr	r2, [pc, #84]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 80004ec:	f023 0301 	bic.w	r3, r3, #1
 80004f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80004f2:	e01f      	b.n	8000534 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOB){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a13      	ldr	r2, [pc, #76]	@ (8000544 <GPIO_PeriClockControl+0xd0>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d106      	bne.n	800050a <GPIO_PeriClockControl+0x96>
			GPIOB_PCLK_DI();
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 80004fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000500:	4a0f      	ldr	r2, [pc, #60]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 8000502:	f023 0302 	bic.w	r3, r3, #2
 8000506:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000508:	e014      	b.n	8000534 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOC){
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <GPIO_PeriClockControl+0xd4>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d106      	bne.n	8000520 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 8000512:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000516:	4a0a      	ldr	r2, [pc, #40]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 8000518:	f023 0301 	bic.w	r3, r3, #1
 800051c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800051e:	e009      	b.n	8000534 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOH){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <GPIO_PeriClockControl+0xd8>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d105      	bne.n	8000534 <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_DI();
 8000528:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 800052a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052c:	4a04      	ldr	r2, [pc, #16]	@ (8000540 <GPIO_PeriClockControl+0xcc>)
 800052e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000532:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000
 8000544:	48000400 	.word	0x48000400
 8000548:	48000800 	.word	0x48000800
 800054c:	48001c00 	.word	0x48001c00

08000550 <GPIO_Init>:
 * @param[in] 	- GPIO Handler
 * return 		- none
 *
 * note 		- refer @GPIO_RegDef_t in "nucleo-l432kc_gpio_driver.h"
 */
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle){
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	// 1. enable clock to peripheral
	// doing manually for now

	// 2. configure mode of GPIO pin

	if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	795b      	ldrb	r3, [r3, #5]
 800055c:	2b03      	cmp	r3, #3
 800055e:	d820      	bhi.n	80005a2 <GPIO_Init+0x52>
		// non-interrupt mode

		tempR = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	795b      	ldrb	r3, [r3, #5]
 8000564:	461a      	mov	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	fa02 f303 	lsl.w	r3, r2, r3
 8000570:	613b      	str	r3, [r7, #16]
		pGPIO_Handle->pGPIOx->MODER &= ~(0b11 << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));					// clearing
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	2103      	movs	r1, #3
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	4619      	mov	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	400a      	ands	r2, r1
 800058e:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER |= tempR;																			// setting
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	6819      	ldr	r1, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	430a      	orrs	r2, r1
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	e08f      	b.n	80006c2 <GPIO_Init+0x172>
	}
	else{
		// interrupt mode

		// configure the interrupt mode (falling edge, rising edge) using EXTI_FTSR1 and EXTI_RTSR1 registers for EXTIx line
		if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ITFT){
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d117      	bne.n	80005da <GPIO_Init+0x8a>
			// 1. configure FTSR (falling-edge trigger selection register
			EXTI->EXTI_FTSR1 |= (0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80005aa:	4b92      	ldr	r3, [pc, #584]	@ (80007f4 <GPIO_Init+0x2a4>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a8e      	ldr	r2, [pc, #568]	@ (80007f4 <GPIO_Init+0x2a4>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR1 &= ~(0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80005c0:	4b8c      	ldr	r3, [pc, #560]	@ (80007f4 <GPIO_Init+0x2a4>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	43d2      	mvns	r2, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a88      	ldr	r2, [pc, #544]	@ (80007f4 <GPIO_Init+0x2a4>)
 80005d4:	400b      	ands	r3, r1
 80005d6:	6093      	str	r3, [r2, #8]
 80005d8:	e031      	b.n	800063e <GPIO_Init+0xee>

		}
		else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ITRT){
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	2b05      	cmp	r3, #5
 80005e0:	d117      	bne.n	8000612 <GPIO_Init+0xc2>
			// 1. configure RTSR (rising edge trigger selection register
			EXTI->EXTI_RTSR1 |= (0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80005e2:	4b84      	ldr	r3, [pc, #528]	@ (80007f4 <GPIO_Init+0x2a4>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	7912      	ldrb	r2, [r2, #4]
 80005ea:	4611      	mov	r1, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	408a      	lsls	r2, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a80      	ldr	r2, [pc, #512]	@ (80007f4 <GPIO_Init+0x2a4>)
 80005f4:	430b      	orrs	r3, r1
 80005f6:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR1 &= ~(0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80005f8:	4b7e      	ldr	r3, [pc, #504]	@ (80007f4 <GPIO_Init+0x2a4>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	7912      	ldrb	r2, [r2, #4]
 8000600:	4611      	mov	r1, r2
 8000602:	2201      	movs	r2, #1
 8000604:	408a      	lsls	r2, r1
 8000606:	43d2      	mvns	r2, r2
 8000608:	4611      	mov	r1, r2
 800060a:	4a7a      	ldr	r2, [pc, #488]	@ (80007f4 <GPIO_Init+0x2a4>)
 800060c:	400b      	ands	r3, r1
 800060e:	60d3      	str	r3, [r2, #12]
 8000610:	e015      	b.n	800063e <GPIO_Init+0xee>
		}
		else{
			// 1. configure FTSR & RTSR
			EXTI->EXTI_RTSR1 |= (0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	4b78      	ldr	r3, [pc, #480]	@ (80007f4 <GPIO_Init+0x2a4>)
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	7912      	ldrb	r2, [r2, #4]
 800061a:	4611      	mov	r1, r2
 800061c:	2201      	movs	r2, #1
 800061e:	408a      	lsls	r2, r1
 8000620:	4611      	mov	r1, r2
 8000622:	4a74      	ldr	r2, [pc, #464]	@ (80007f4 <GPIO_Init+0x2a4>)
 8000624:	430b      	orrs	r3, r1
 8000626:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR1 |= (0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000628:	4b72      	ldr	r3, [pc, #456]	@ (80007f4 <GPIO_Init+0x2a4>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	7912      	ldrb	r2, [r2, #4]
 8000630:	4611      	mov	r1, r2
 8000632:	2201      	movs	r2, #1
 8000634:	408a      	lsls	r2, r1
 8000636:	4611      	mov	r1, r2
 8000638:	4a6e      	ldr	r2, [pc, #440]	@ (80007f4 <GPIO_Init+0x2a4>)
 800063a:	430b      	orrs	r3, r1
 800063c:	60d3      	str	r3, [r2, #12]
		}

		// 2. configure GPIO port selection in SYSCFG_EXTICR (System Configuration External Interrupt Configuration Register) for EXTIx line

		uint8_t tempRegIndex = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 4;			// temporary register index
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	089b      	lsrs	r3, r3, #2
 8000644:	75fb      	strb	r3, [r7, #23]
		uint8_t tempPosIndex = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 4;			// temporary position index
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	f003 0303 	and.w	r3, r3, #3
 800064e:	75bb      	strb	r3, [r7, #22]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIO_Handle->pGPIOx);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000658:	d016      	beq.n	8000688 <GPIO_Init+0x138>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a66      	ldr	r2, [pc, #408]	@ (80007f8 <GPIO_Init+0x2a8>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d00f      	beq.n	8000684 <GPIO_Init+0x134>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a64      	ldr	r2, [pc, #400]	@ (80007fc <GPIO_Init+0x2ac>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d008      	beq.n	8000680 <GPIO_Init+0x130>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a63      	ldr	r2, [pc, #396]	@ (8000800 <GPIO_Init+0x2b0>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d101      	bne.n	800067c <GPIO_Init+0x12c>
 8000678:	2307      	movs	r3, #7
 800067a:	e006      	b.n	800068a <GPIO_Init+0x13a>
 800067c:	2300      	movs	r3, #0
 800067e:	e004      	b.n	800068a <GPIO_Init+0x13a>
 8000680:	2302      	movs	r3, #2
 8000682:	e002      	b.n	800068a <GPIO_Init+0x13a>
 8000684:	2301      	movs	r3, #1
 8000686:	e000      	b.n	800068a <GPIO_Init+0x13a>
 8000688:	2300      	movs	r3, #0
 800068a:	757b      	strb	r3, [r7, #21]

		SYSCFG_PCLK_EN();
 800068c:	4b5d      	ldr	r3, [pc, #372]	@ (8000804 <GPIO_Init+0x2b4>)
 800068e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000690:	4a5c      	ldr	r2, [pc, #368]	@ (8000804 <GPIO_Init+0x2b4>)
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->SYSCFG_EXTICR[tempRegIndex] = (portCode << (4 * tempPosIndex));
 8000698:	7d7a      	ldrb	r2, [r7, #21]
 800069a:	7dbb      	ldrb	r3, [r7, #22]
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	fa02 f103 	lsl.w	r1, r2, r3
 80006a2:	4a59      	ldr	r2, [pc, #356]	@ (8000808 <GPIO_Init+0x2b8>)
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	3302      	adds	r3, #2
 80006a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. enable EXTI interrupt delivery using IMR (interrupt mask register); AKA enable EXTIx line interrupt delivery to NVIC
		EXTI->EXTI_IMR1 |= (0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80006ac:	4b51      	ldr	r3, [pc, #324]	@ (80007f4 <GPIO_Init+0x2a4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	687a      	ldr	r2, [r7, #4]
 80006b2:	7912      	ldrb	r2, [r2, #4]
 80006b4:	4611      	mov	r1, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	408a      	lsls	r2, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a4d      	ldr	r2, [pc, #308]	@ (80007f4 <GPIO_Init+0x2a4>)
 80006be:	430b      	orrs	r3, r1
 80006c0:	6013      	str	r3, [r2, #0]
	}

	// 3. configure the output speed
	tempR = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinOpSpeed << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	799b      	ldrb	r3, [r3, #6]
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	fa02 f303 	lsl.w	r3, r2, r3
 80006d2:	613b      	str	r3, [r7, #16]
	pGPIO_Handle->pGPIOx->OSPEEDR &= ~(0b11 << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));							// clearing
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	689a      	ldr	r2, [r3, #8]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	2103      	movs	r1, #3
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	43db      	mvns	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	400a      	ands	r2, r1
 80006f0:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOx->OSPEEDR |= tempR;																					// setting
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6899      	ldr	r1, [r3, #8]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	693a      	ldr	r2, [r7, #16]
 80006fe:	430a      	orrs	r2, r1
 8000700:	609a      	str	r2, [r3, #8]

	// 4. configure the pull-up/ pull-down settings
	tempR = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinPUPD << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	7a1b      	ldrb	r3, [r3, #8]
 8000706:	461a      	mov	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	613b      	str	r3, [r7, #16]
	pGPIO_Handle->pGPIOx->PUPDR &= (0b11 << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));								// clearing
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	68da      	ldr	r2, [r3, #12]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	2103      	movs	r1, #3
 8000722:	fa01 f303 	lsl.w	r3, r1, r3
 8000726:	4619      	mov	r1, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	400a      	ands	r2, r1
 800072e:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->PUPDR |= tempR;																					//setting
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68d9      	ldr	r1, [r3, #12]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	693a      	ldr	r2, [r7, #16]
 800073c:	430a      	orrs	r2, r1
 800073e:	60da      	str	r2, [r3, #12]

	// 5. configure the output type
	tempR = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinOpType << (1 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	79db      	ldrb	r3, [r3, #7]
 8000744:	461a      	mov	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	613b      	str	r3, [r7, #16]
	pGPIO_Handle->pGPIOx->OTYPER &= (0b1 << (1 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	685a      	ldr	r2, [r3, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	4619      	mov	r1, r3
 800075c:	2301      	movs	r3, #1
 800075e:	408b      	lsls	r3, r1
 8000760:	4619      	mov	r1, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	400a      	ands	r2, r1
 8000768:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER &= tempR;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6859      	ldr	r1, [r3, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	693a      	ldr	r2, [r7, #16]
 8000776:	400a      	ands	r2, r1
 8000778:	605a      	str	r2, [r3, #4]

	// 6. configure the alternate functionality
	if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	795b      	ldrb	r3, [r3, #5]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d132      	bne.n	80007e8 <GPIO_Init+0x298>
		uint8_t tempRegIndex = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	73fb      	strb	r3, [r7, #15]
		uint8_t tempPinIndex = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	73bb      	strb	r3, [r7, #14]

		tempR = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFun << (4 * tempPinIndex));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7a5b      	ldrb	r3, [r3, #9]
 8000798:	461a      	mov	r2, r3
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	613b      	str	r3, [r7, #16]
		pGPIO_Handle->pGPIOx->AFR[tempRegIndex] &= ~(0b1111 << (4 * tempPinIndex));				// setting
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	7bfa      	ldrb	r2, [r7, #15]
 80007aa:	3208      	adds	r2, #8
 80007ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	220f      	movs	r2, #15
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4618      	mov	r0, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	7bfa      	ldrb	r2, [r7, #15]
 80007c4:	4001      	ands	r1, r0
 80007c6:	3208      	adds	r2, #8
 80007c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIO_Handle->pGPIOx->AFR[tempRegIndex] |= tempR;										// clearing
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	7bfa      	ldrb	r2, [r7, #15]
 80007d2:	3208      	adds	r2, #8
 80007d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	7bfa      	ldrb	r2, [r7, #15]
 80007de:	6939      	ldr	r1, [r7, #16]
 80007e0:	4301      	orrs	r1, r0
 80007e2:	3208      	adds	r2, #8
 80007e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80007e8:	bf00      	nop
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40010400 	.word	0x40010400
 80007f8:	48000400 	.word	0x48000400
 80007fc:	48000800 	.word	0x48000800
 8000800:	48001c00 	.word	0x48001c00
 8000804:	40021000 	.word	0x40021000
 8000808:	40010000 	.word	0x40010000

0800080c <SPI_PeriClockControl>:
 * @param[in] 	- ENABLE or DISABLE macro
 * return 		- none
 *
 * note 		- none
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDis){
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
	if (EnorDis == ENABLE){
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d115      	bne.n	800084a <SPI_PeriClockControl+0x3e>
		if (pSPIx == SPI1){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4a17      	ldr	r2, [pc, #92]	@ (8000880 <SPI_PeriClockControl+0x74>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d106      	bne.n	8000834 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <SPI_PeriClockControl+0x78>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082a:	4a16      	ldr	r2, [pc, #88]	@ (8000884 <SPI_PeriClockControl+0x78>)
 800082c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000830:	6613      	str	r3, [r2, #96]	@ 0x60
		}
		else if (pSPIx == SPI3){
			SPI3_PCLK_DI();
		}
	}
}
 8000832:	e01f      	b.n	8000874 <SPI_PeriClockControl+0x68>
		else if (pSPIx == SPI3){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a14      	ldr	r2, [pc, #80]	@ (8000888 <SPI_PeriClockControl+0x7c>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d11b      	bne.n	8000874 <SPI_PeriClockControl+0x68>
			SPI3_PCLK_EN();
 800083c:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <SPI_PeriClockControl+0x78>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000840:	4a10      	ldr	r2, [pc, #64]	@ (8000884 <SPI_PeriClockControl+0x78>)
 8000842:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000846:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000848:	e014      	b.n	8000874 <SPI_PeriClockControl+0x68>
		if (pSPIx == SPI1){
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a0c      	ldr	r2, [pc, #48]	@ (8000880 <SPI_PeriClockControl+0x74>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d106      	bne.n	8000860 <SPI_PeriClockControl+0x54>
			SPI1_PCLK_DI();
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <SPI_PeriClockControl+0x78>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000856:	4a0b      	ldr	r2, [pc, #44]	@ (8000884 <SPI_PeriClockControl+0x78>)
 8000858:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800085c:	6613      	str	r3, [r2, #96]	@ 0x60
}
 800085e:	e009      	b.n	8000874 <SPI_PeriClockControl+0x68>
		else if (pSPIx == SPI3){
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	4a09      	ldr	r2, [pc, #36]	@ (8000888 <SPI_PeriClockControl+0x7c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d105      	bne.n	8000874 <SPI_PeriClockControl+0x68>
			SPI3_PCLK_DI();
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <SPI_PeriClockControl+0x78>)
 800086a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800086c:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <SPI_PeriClockControl+0x78>)
 800086e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000872:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40013000 	.word	0x40013000
 8000884:	40021000 	.word	0x40021000
 8000888:	40003c00 	.word	0x40003c00

0800088c <SPI_Init>:
 * @param[in] 	- SPI Handler
 * return 		- none
 *
 * note 		- refer @SPI_RegDef_t in "nucleo-l432kc_SPI_driver.h"
 */
void SPI_Init(SPI_Handle_t *pSPI_Handle){
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	// configure SPIx_CR1 register && SPIx_CR2 register

	uint32_t tempReg1 = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
	uint32_t tempReg2 = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60bb      	str	r3, [r7, #8]

	// 1. configure device mode
	tempReg1 |= (pSPI_Handle->SPI_PinConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]

	// 2. configure bus configuration
	if (pSPI_Handle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_FULL_DUPLX){
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	795b      	ldrb	r3, [r3, #5]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d104      	bne.n	80008ba <SPI_Init+0x2e>
		// clear BIDIMODE bit
		tempReg1 &= ~(0b1 << SPI_CR1_BIDIMODE);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	e014      	b.n	80008e4 <SPI_Init+0x58>
	}
	else if (pSPI_Handle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_HALF_DUPLX){
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	795b      	ldrb	r3, [r3, #5]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d104      	bne.n	80008cc <SPI_Init+0x40>
		// set BIDIMODE bit
		tempReg1 |= (0b1 << SPI_CR1_BIDIMODE);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	e00b      	b.n	80008e4 <SPI_Init+0x58>
	}
	else if (pSPI_Handle->SPI_PinConfig.SPI_BusConfig == SPI_BUS_CONFIG_SMPLX_RX){
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	795b      	ldrb	r3, [r3, #5]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d107      	bne.n	80008e4 <SPI_Init+0x58>
		// clear BIDIMODE bit
		// set RXONLY bit
		tempReg1 &= ~(0b1 << SPI_CR1_BIDIMODE);
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008da:	60fb      	str	r3, [r7, #12]
		tempReg1 |= (0b1 << SPI_CR1_RXONLY);
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008e2:	60fb      	str	r3, [r7, #12]
	}

	// 3. configure data size
	tempReg2 |= (pSPI_Handle->SPI_PinConfig.SPI_DS << SPI_CR2_DS);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	799b      	ldrb	r3, [r3, #6]
 80008e8:	021b      	lsls	r3, r3, #8
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]

	// 4. configure clock phase
	tempReg1 |= (pSPI_Handle->SPI_PinConfig.SPI_CPHA << SPI_CR1_CPHA);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	79db      	ldrb	r3, [r3, #7]
 80008f4:	461a      	mov	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]

	// 5. configure clock polarity
	tempReg1 |= (pSPI_Handle->SPI_PinConfig.SPI_CPOL << SPI_CR1_CPOL);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	7a1b      	ldrb	r3, [r3, #8]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	68fa      	ldr	r2, [r7, #12]
 8000904:	4313      	orrs	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]

	// 6. configure software slave management
	tempReg1 |= (pSPI_Handle->SPI_PinConfig.SPI_SSM << SPI_CR1_SSM);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7a5b      	ldrb	r3, [r3, #9]
 800090c:	025b      	lsls	r3, r3, #9
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4313      	orrs	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]

	// 7. configure baudrate control
	tempReg1 |= (pSPI_Handle->SPI_PinConfig.SPI_BDRCtrl << SPI_CR1_BR);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7a9b      	ldrb	r3, [r3, #10]
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4313      	orrs	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]

	pSPI_Handle->pSPIx->SPIx_CR1 = tempReg1;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	601a      	str	r2, [r3, #0]
	pSPI_Handle->pSPIx->SPIx_CR2 = tempReg2;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	605a      	str	r2, [r3, #4]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr

0800093a <SPI_SendData>:
 * @param[in] 	- length of data to be transmitted (HAS TO BE IN uint32_t)
 * @return 		- none
 *
 * @note 		- this is a blocking method
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, int length){
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	60f8      	str	r0, [r7, #12]
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
	// first check whether the data to be transmitted is still pending
	while (length > 0){
 8000946:	e02c      	b.n	80009a2 <SPI_SendData+0x68>
		// wait till TXE bit is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == RESET);
 8000948:	bf00      	nop
 800094a:	2102      	movs	r1, #2
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f000 f86c 	bl	8000a2a <SPI_GetFlagStatus>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d0f8      	beq.n	800094a <SPI_SendData+0x10>

		// check the DF bit (I have implemented it only for 8 and 16 bit frame format)
		if (((pSPIx->SPIx_CR2 >> 8) & 0b1111) == SPI_DS_8_BIT){
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	f003 030f 	and.w	r3, r3, #15
 8000962:	2b07      	cmp	r3, #7
 8000964:	d10b      	bne.n	800097e <SPI_SendData+0x44>
			// 8 bit frame format
			*(uint8_t*)&pSPIx->SPIx_DR = *(uint8_t *)pTxBuffer;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	330c      	adds	r3, #12
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	701a      	strb	r2, [r3, #0]
			length = length - 1;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	3301      	adds	r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	e011      	b.n	80009a2 <SPI_SendData+0x68>
		}
		else if (((pSPIx->SPIx_CR2 >> 8) & 0b1111) == SPI_DS_16_BIT){
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	0a1b      	lsrs	r3, r3, #8
 8000984:	f003 030f 	and.w	r3, r3, #15
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d10a      	bne.n	80009a2 <SPI_SendData+0x68>
			// 16 bit frame format
			pSPIx->SPIx_DR = *(uint16_t *)pTxBuffer;
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	461a      	mov	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	60da      	str	r2, [r3, #12]
			length = length - 2;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	3b02      	subs	r3, #2
 800099a:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTxBuffer++;
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	3301      	adds	r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
	while (length > 0){
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dccf      	bgt.n	8000948 <SPI_SendData+0xe>
		}
	}
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <SPI_ReceiveData>:
 * @param[in] 	- length of data to be received
 * @return 		- none
 *
 * @note 		- this is a blocking method
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, int length){
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
	// first check whether the data to be transmitted is still pending
	while (length > 0){
 80009be:	e02c      	b.n	8000a1a <SPI_ReceiveData+0x68>
		// wait till RXNE bit is set
		while(SPI_GetFlagStatus(pSPIx,SPI_RXNE_FLAG) == SET);
 80009c0:	bf00      	nop
 80009c2:	2101      	movs	r1, #1
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f000 f830 	bl	8000a2a <SPI_GetFlagStatus>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d0f8      	beq.n	80009c2 <SPI_ReceiveData+0x10>

		// check the DF bit (I have implemented it only for 8 and 16 bit frame format)
		if (((pSPIx->SPIx_CR2 >> 8) & 0b1111) == SPI_DS_8_BIT){
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	2b07      	cmp	r3, #7
 80009dc:	d10b      	bne.n	80009f6 <SPI_ReceiveData+0x44>
			// 8 bit frame format
			*(uint8_t *)pRxBuffer = *(uint8_t*)&pSPIx->SPIx_DR;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	330c      	adds	r3, #12
 80009e2:	781a      	ldrb	r2, [r3, #0]
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	701a      	strb	r2, [r3, #0]
			length = length - 1;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
			pRxBuffer++;
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	3301      	adds	r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	e011      	b.n	8000a1a <SPI_ReceiveData+0x68>
		}
		else if (((pSPIx->SPIx_CR2 >> 8) & 0b1111) == SPI_DS_16_BIT){
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	0a1b      	lsrs	r3, r3, #8
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	2b0f      	cmp	r3, #15
 8000a02:	d10a      	bne.n	8000a1a <SPI_ReceiveData+0x68>
			// 16 bit frame format
			*(uint16_t *)pRxBuffer = pSPIx->SPIx_DR;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	b29a      	uxth	r2, r3
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	801a      	strh	r2, [r3, #0]
			length = length - 2;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3b02      	subs	r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
			(uint16_t *)pRxBuffer++;
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
	while (length > 0){
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	dccf      	bgt.n	80009c0 <SPI_ReceiveData+0xe>
		}
	}
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <SPI_GetFlagStatus>:
 * @return 		- none
 *
 * @note 		- none)
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6039      	str	r1, [r7, #0]
	if(pSPIx->SPIx_SR & FlagName)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SPI_GetFlagStatus+0x1a>
	{
		return SET;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <SPI_GetFlagStatus+0x1c>
	}
	return RESET;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <SPI_PeripheralControl>:
 * @param[in] 	- ENABLE or DISABLE macro
 * @return 		- none
 *
 * @note 		- SPE bit (SPI Enable bit)
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d106      	bne.n	8000a70 <SPI_PeripheralControl+0x20>
		pSPIx->SPIx_CR1 |= (0b1 << SPI_CR1_SPE);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->SPIx_CR1 &= ~(0b1 << SPI_CR1_SPE);
	}
}
 8000a6e:	e005      	b.n	8000a7c <SPI_PeripheralControl+0x2c>
		pSPIx->SPIx_CR1 &= ~(0b1 << SPI_CR1_SPE);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr

08000a86 <SPI_SSIConfig>:
 * @param[in] 	- ENABLE or DISABLE macro
 * @return 		- none
 *
 * @note 		- SSI bit (Internal slave select bit)
 */
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d106      	bne.n	8000aa6 <SPI_SSIConfig+0x20>
		pSPIx->SPIx_CR1 |= (0b1 << SPI_CR1_SSI);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	601a      	str	r2, [r3, #0]
	}
	else{
		pSPIx->SPIx_CR1 &= ~(0b1 << SPI_CR1_SSI);

	}
}
 8000aa4:	e005      	b.n	8000ab2 <SPI_SSIConfig+0x2c>
		pSPIx->SPIx_CR1 &= ~(0b1 << SPI_CR1_SSI);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <__libc_init_array>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	4d0d      	ldr	r5, [pc, #52]	@ (8000af4 <__libc_init_array+0x38>)
 8000ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8000af8 <__libc_init_array+0x3c>)
 8000ac2:	1b64      	subs	r4, r4, r5
 8000ac4:	10a4      	asrs	r4, r4, #2
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	42a6      	cmp	r6, r4
 8000aca:	d109      	bne.n	8000ae0 <__libc_init_array+0x24>
 8000acc:	4d0b      	ldr	r5, [pc, #44]	@ (8000afc <__libc_init_array+0x40>)
 8000ace:	4c0c      	ldr	r4, [pc, #48]	@ (8000b00 <__libc_init_array+0x44>)
 8000ad0:	f000 f818 	bl	8000b04 <_init>
 8000ad4:	1b64      	subs	r4, r4, r5
 8000ad6:	10a4      	asrs	r4, r4, #2
 8000ad8:	2600      	movs	r6, #0
 8000ada:	42a6      	cmp	r6, r4
 8000adc:	d105      	bne.n	8000aea <__libc_init_array+0x2e>
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae4:	4798      	blx	r3
 8000ae6:	3601      	adds	r6, #1
 8000ae8:	e7ee      	b.n	8000ac8 <__libc_init_array+0xc>
 8000aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aee:	4798      	blx	r3
 8000af0:	3601      	adds	r6, #1
 8000af2:	e7f2      	b.n	8000ada <__libc_init_array+0x1e>
 8000af4:	08000b1c 	.word	0x08000b1c
 8000af8:	08000b1c 	.word	0x08000b1c
 8000afc:	08000b1c 	.word	0x08000b1c
 8000b00:	08000b20 	.word	0x08000b20

08000b04 <_init>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	bf00      	nop
 8000b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0a:	bc08      	pop	{r3}
 8000b0c:	469e      	mov	lr, r3
 8000b0e:	4770      	bx	lr

08000b10 <_fini>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	bf00      	nop
 8000b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b16:	bc08      	pop	{r3}
 8000b18:	469e      	mov	lr, r3
 8000b1a:	4770      	bx	lr
