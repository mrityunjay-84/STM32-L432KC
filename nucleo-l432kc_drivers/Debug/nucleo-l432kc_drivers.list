
nucleo-l432kc_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800084c  08000854  00001854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800084c  0800084c  00001854  2**0
                  CONTENTS
  4 .ARM          00000000  0800084c  0800084c  00001854  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800084c  08000854  00001854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800084c  0800084c  0000184c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000850  08000850  00001850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00001854  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000bab  00000000  00000000  0000187e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002cc  00000000  00000000  00002429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000026f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000086  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020c9  00000000  00000000  0000283e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000110b  00000000  00000000  00004907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008b57  00000000  00000000  00005a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000e569  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000260  00000000  00000000  0000e5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0000e80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000834 	.word	0x08000834

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000834 	.word	0x08000834

080001d4 <main>:
 *      Author: mrityunjay
 */

#include "nucleo-l432kc.h"

int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
	// user led is at PB3 (D13)
	// configuring the GPIO registers for Port B Pin 3

	GPIO_Handle_t gpio_led;
	memset(&gpio_led, 0, sizeof(gpio_led));
 80001da:	f107 030c 	add.w	r3, r7, #12
 80001de:	220c      	movs	r2, #12
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fafa 	bl	80007dc <memset>

	gpio_led.pGPIOx = GPIOB;
 80001e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000258 <main+0x84>)
 80001ea:	60fb      	str	r3, [r7, #12]
	gpio_led.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_3;
 80001ec:	2303      	movs	r3, #3
 80001ee:	743b      	strb	r3, [r7, #16]
	gpio_led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80001f0:	2301      	movs	r3, #1
 80001f2:	747b      	strb	r3, [r7, #17]
	gpio_led.GPIO_PinConfig.GPIO_PinOpSpeed = GPIO_OPSPEED_LOW;
 80001f4:	2300      	movs	r3, #0
 80001f6:	74bb      	strb	r3, [r7, #18]
	gpio_led.GPIO_PinConfig.GPIO_PinOpType = GPIO_OPTYPE_PUSHPULL;
 80001f8:	2300      	movs	r3, #0
 80001fa:	74fb      	strb	r3, [r7, #19]
	gpio_led.GPIO_PinConfig.GPIO_PinPUPD = GPIO_PUPD_NOPUPD;
 80001fc:	2300      	movs	r3, #0
 80001fe:	753b      	strb	r3, [r7, #20]


	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000200:	2101      	movs	r1, #1
 8000202:	4815      	ldr	r0, [pc, #84]	@ (8000258 <main+0x84>)
 8000204:	f000 f862 	bl	80002cc <GPIO_PeriClockControl>
	GPIO_Init(&gpio_led);
 8000208:	f107 030c 	add.w	r3, r7, #12
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f8c1 	bl	8000394 <GPIO_Init>

	// external button at PB4
	// configuring the GPIO registers for Port B Pin 4

	GPIO_Handle_t gpio_uno;
	memset(&gpio_uno, 0, sizeof(gpio_uno));
 8000212:	463b      	mov	r3, r7
 8000214:	220c      	movs	r2, #12
 8000216:	2100      	movs	r1, #0
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fadf 	bl	80007dc <memset>

	gpio_uno.pGPIOx = GPIOB;
 800021e:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <main+0x84>)
 8000220:	603b      	str	r3, [r7, #0]
	gpio_uno.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_4;
 8000222:	2304      	movs	r3, #4
 8000224:	713b      	strb	r3, [r7, #4]
	gpio_uno.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ITFT;
 8000226:	2304      	movs	r3, #4
 8000228:	717b      	strb	r3, [r7, #5]
	gpio_uno.GPIO_PinConfig.GPIO_PinPUPD = GPIO_PUPD_PU;
 800022a:	2301      	movs	r3, #1
 800022c:	723b      	strb	r3, [r7, #8]

	// GPIO_PeriClockControl(GPIOB, ENABLE);
	// no need here because clock to GPIOB peripheral has already been enabled
	GPIO_Init(&gpio_uno);
 800022e:	463b      	mov	r3, r7
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f8af 	bl	8000394 <GPIO_Init>
	GPIO_WriteToOutputPin(gpio_uno.pGPIOx, gpio_uno.GPIO_PinConfig.GPIO_PinNumber, RESET);
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	7939      	ldrb	r1, [r7, #4]
 800023a:	2200      	movs	r2, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f000 fa07 	bl	8000650 <GPIO_WriteToOutputPin>

	// IRQ Configurations
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI4, ENABLE);
 8000242:	2101      	movs	r1, #1
 8000244:	200a      	movs	r0, #10
 8000246:	f000 fa3b 	bl	80006c0 <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI4, 17);			// refer vector table for priority or set your own
 800024a:	2111      	movs	r1, #17
 800024c:	200a      	movs	r0, #10
 800024e:	f000 fa7d 	bl	800074c <GPIO_IRQPriorityConfig>

	while(1){
 8000252:	bf00      	nop
 8000254:	e7fd      	b.n	8000252 <main+0x7e>
 8000256:	bf00      	nop
 8000258:	48000400 	.word	0x48000400

0800025c <EXTI4_IRQHandler>:
	}

	return 1;
}

void EXTI4_IRQHandler(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_NO_4);
 8000260:	2004      	movs	r0, #4
 8000262:	f000 fa9b 	bl	800079c <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOB, GPIO_NO_3);
 8000266:	2103      	movs	r1, #3
 8000268:	4802      	ldr	r0, [pc, #8]	@ (8000274 <EXTI4_IRQHandler+0x18>)
 800026a:	f000 fa15 	bl	8000698 <GPIO_ToggleOutputPin>
}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	48000400 	.word	0x48000400

08000278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000278:	480d      	ldr	r0, [pc, #52]	@ (80002b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800027c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480c      	ldr	r0, [pc, #48]	@ (80002b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000282:	490d      	ldr	r1, [pc, #52]	@ (80002b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000284:	4a0d      	ldr	r2, [pc, #52]	@ (80002bc <LoopForever+0xe>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	@ (80002c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000298:	4c0a      	ldr	r4, [pc, #40]	@ (80002c4 <LoopForever+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a6:	f000 faa1 	bl	80007ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f7ff ff93 	bl	80001d4 <main>

080002ae <LoopForever>:

LoopForever:
  b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   r0, =_estack
 80002b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002bc:	08000854 	.word	0x08000854
  ldr r2, =_sbss
 80002c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c4:	2000001c 	.word	0x2000001c

080002c8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_IRQHandler>
	...

080002cc <GPIO_PeriClockControl>:
 * @param[in] 	- ENABLE or DISABLE macro
 * return 		- none
 *
 * note 		- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDis){
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	460b      	mov	r3, r1
 80002d6:	70fb      	strb	r3, [r7, #3]
	if (EnorDis == ENABLE){
 80002d8:	78fb      	ldrb	r3, [r7, #3]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d127      	bne.n	800032e <GPIO_PeriClockControl+0x62>
		if (pGPIOx == GPIOA){
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80002e4:	d106      	bne.n	80002f4 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002e6:	4b28      	ldr	r3, [pc, #160]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ea:	4a27      	ldr	r2, [pc, #156]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
		}
		else{
			GPIOH_PCLK_DI();
		}
	}
}
 80002f2:	e043      	b.n	800037c <GPIO_PeriClockControl+0xb0>
		else if (pGPIOx == GPIOB){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a25      	ldr	r2, [pc, #148]	@ (800038c <GPIO_PeriClockControl+0xc0>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002fc:	4b22      	ldr	r3, [pc, #136]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 80002fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000300:	4a21      	ldr	r2, [pc, #132]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000302:	f043 0302 	orr.w	r3, r3, #2
 8000306:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000308:	e038      	b.n	800037c <GPIO_PeriClockControl+0xb0>
		else if (pGPIOx == GPIOC){
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a20      	ldr	r2, [pc, #128]	@ (8000390 <GPIO_PeriClockControl+0xc4>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PeriClockControl+0x54>
			GPIOA_PCLK_EN();
 8000312:	4b1d      	ldr	r3, [pc, #116]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000316:	4a1c      	ldr	r2, [pc, #112]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800031e:	e02d      	b.n	800037c <GPIO_PeriClockControl+0xb0>
			GPIOH_PCLK_EN();
 8000320:	4b19      	ldr	r3, [pc, #100]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000324:	4a18      	ldr	r2, [pc, #96]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800032a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800032c:	e026      	b.n	800037c <GPIO_PeriClockControl+0xb0>
		if (pGPIOx == GPIOA){
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x78>
			GPIOA_PCLK_DI();
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033a:	4a13      	ldr	r2, [pc, #76]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 800033c:	f023 0301 	bic.w	r3, r3, #1
 8000340:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000342:	e01b      	b.n	800037c <GPIO_PeriClockControl+0xb0>
		else if (pGPIOx == GPIOB){
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a11      	ldr	r2, [pc, #68]	@ (800038c <GPIO_PeriClockControl+0xc0>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x8e>
			GPIOB_PCLK_DI();
 800034c:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 800034e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000350:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000352:	f023 0302 	bic.w	r3, r3, #2
 8000356:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8000358:	e010      	b.n	800037c <GPIO_PeriClockControl+0xb0>
		else if (pGPIOx == GPIOC){
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a0c      	ldr	r2, [pc, #48]	@ (8000390 <GPIO_PeriClockControl+0xc4>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0xa4>
			GPIOA_PCLK_DI();
 8000362:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000366:	4a08      	ldr	r2, [pc, #32]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000368:	f023 0301 	bic.w	r3, r3, #1
 800036c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800036e:	e005      	b.n	800037c <GPIO_PeriClockControl+0xb0>
			GPIOH_PCLK_DI();
 8000370:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000374:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <GPIO_PeriClockControl+0xbc>)
 8000376:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800037a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	bc80      	pop	{r7}
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000
 800038c:	48000400 	.word	0x48000400
 8000390:	48000800 	.word	0x48000800

08000394 <GPIO_Init>:
 * @param[in] 	- GPIO Handler
 * return 		- none
 *
 * note 		- refer @GPIO_RegDef_t in "nucleo-l432kc_gpio_driver.h"
 */
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle){
 8000394:	b480      	push	{r7}
 8000396:	b087      	sub	sp, #28
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	// 1. enable clock to peripheral
	// doing manually for now

	// 2. configure mode of GPIO pin

	if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	795b      	ldrb	r3, [r3, #5]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d820      	bhi.n	80003e6 <GPIO_Init+0x52>
		// non-interrupt mode

		tempR = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	795b      	ldrb	r3, [r3, #5]
 80003a8:	461a      	mov	r2, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	791b      	ldrb	r3, [r3, #4]
 80003ae:	005b      	lsls	r3, r3, #1
 80003b0:	fa02 f303 	lsl.w	r3, r2, r3
 80003b4:	613b      	str	r3, [r7, #16]
		pGPIO_Handle->pGPIOx->MODER &= ~(0b11 << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));					// clearing
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	681a      	ldr	r2, [r3, #0]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	791b      	ldrb	r3, [r3, #4]
 80003c0:	005b      	lsls	r3, r3, #1
 80003c2:	2103      	movs	r1, #3
 80003c4:	fa01 f303 	lsl.w	r3, r1, r3
 80003c8:	43db      	mvns	r3, r3
 80003ca:	4619      	mov	r1, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	400a      	ands	r2, r1
 80003d2:	601a      	str	r2, [r3, #0]
		pGPIO_Handle->pGPIOx->MODER |= tempR;																			// setting
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6819      	ldr	r1, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	693a      	ldr	r2, [r7, #16]
 80003e0:	430a      	orrs	r2, r1
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	e08f      	b.n	8000506 <GPIO_Init+0x172>
	}
	else{
		// interrupt mode

		// configure the interrupt mode (falling edge, rising edge) using EXTI_FTSR1 and EXTI_RTSR1 registers for EXTIx line
		if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ITFT){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	795b      	ldrb	r3, [r3, #5]
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	d117      	bne.n	800041e <GPIO_Init+0x8a>
			// 1. configure FTSR (falling-edge trigger selection register
			EXTI->EXTI_FTSR1 |= (0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80003ee:	4b92      	ldr	r3, [pc, #584]	@ (8000638 <GPIO_Init+0x2a4>)
 80003f0:	68db      	ldr	r3, [r3, #12]
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	7912      	ldrb	r2, [r2, #4]
 80003f6:	4611      	mov	r1, r2
 80003f8:	2201      	movs	r2, #1
 80003fa:	408a      	lsls	r2, r1
 80003fc:	4611      	mov	r1, r2
 80003fe:	4a8e      	ldr	r2, [pc, #568]	@ (8000638 <GPIO_Init+0x2a4>)
 8000400:	430b      	orrs	r3, r1
 8000402:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR1 &= ~(0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000404:	4b8c      	ldr	r3, [pc, #560]	@ (8000638 <GPIO_Init+0x2a4>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	7912      	ldrb	r2, [r2, #4]
 800040c:	4611      	mov	r1, r2
 800040e:	2201      	movs	r2, #1
 8000410:	408a      	lsls	r2, r1
 8000412:	43d2      	mvns	r2, r2
 8000414:	4611      	mov	r1, r2
 8000416:	4a88      	ldr	r2, [pc, #544]	@ (8000638 <GPIO_Init+0x2a4>)
 8000418:	400b      	ands	r3, r1
 800041a:	6093      	str	r3, [r2, #8]
 800041c:	e031      	b.n	8000482 <GPIO_Init+0xee>

		}
		else if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ITRT){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	795b      	ldrb	r3, [r3, #5]
 8000422:	2b05      	cmp	r3, #5
 8000424:	d117      	bne.n	8000456 <GPIO_Init+0xc2>
			// 1. configure RTSR (rising edge trigger selection register
			EXTI->EXTI_RTSR1 |= (0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000426:	4b84      	ldr	r3, [pc, #528]	@ (8000638 <GPIO_Init+0x2a4>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	7912      	ldrb	r2, [r2, #4]
 800042e:	4611      	mov	r1, r2
 8000430:	2201      	movs	r2, #1
 8000432:	408a      	lsls	r2, r1
 8000434:	4611      	mov	r1, r2
 8000436:	4a80      	ldr	r2, [pc, #512]	@ (8000638 <GPIO_Init+0x2a4>)
 8000438:	430b      	orrs	r3, r1
 800043a:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR1 &= ~(0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800043c:	4b7e      	ldr	r3, [pc, #504]	@ (8000638 <GPIO_Init+0x2a4>)
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	7912      	ldrb	r2, [r2, #4]
 8000444:	4611      	mov	r1, r2
 8000446:	2201      	movs	r2, #1
 8000448:	408a      	lsls	r2, r1
 800044a:	43d2      	mvns	r2, r2
 800044c:	4611      	mov	r1, r2
 800044e:	4a7a      	ldr	r2, [pc, #488]	@ (8000638 <GPIO_Init+0x2a4>)
 8000450:	400b      	ands	r3, r1
 8000452:	60d3      	str	r3, [r2, #12]
 8000454:	e015      	b.n	8000482 <GPIO_Init+0xee>
		}
		else{
			// 1. configure FTSR & RTSR
			EXTI->EXTI_RTSR1 |= (0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000456:	4b78      	ldr	r3, [pc, #480]	@ (8000638 <GPIO_Init+0x2a4>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	7912      	ldrb	r2, [r2, #4]
 800045e:	4611      	mov	r1, r2
 8000460:	2201      	movs	r2, #1
 8000462:	408a      	lsls	r2, r1
 8000464:	4611      	mov	r1, r2
 8000466:	4a74      	ldr	r2, [pc, #464]	@ (8000638 <GPIO_Init+0x2a4>)
 8000468:	430b      	orrs	r3, r1
 800046a:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR1 |= (0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 800046c:	4b72      	ldr	r3, [pc, #456]	@ (8000638 <GPIO_Init+0x2a4>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	7912      	ldrb	r2, [r2, #4]
 8000474:	4611      	mov	r1, r2
 8000476:	2201      	movs	r2, #1
 8000478:	408a      	lsls	r2, r1
 800047a:	4611      	mov	r1, r2
 800047c:	4a6e      	ldr	r2, [pc, #440]	@ (8000638 <GPIO_Init+0x2a4>)
 800047e:	430b      	orrs	r3, r1
 8000480:	60d3      	str	r3, [r2, #12]
		}

		// 2. configure GPIO port selection in SYSCFG_EXTICR (System Configuration External Interrupt Configuration Register) for EXTIx line

		uint8_t tempRegIndex = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 4;			// temporary register index
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	089b      	lsrs	r3, r3, #2
 8000488:	75fb      	strb	r3, [r7, #23]
		uint8_t tempPosIndex = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 4;			// temporary position index
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	f003 0303 	and.w	r3, r3, #3
 8000492:	75bb      	strb	r3, [r7, #22]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIO_Handle->pGPIOx);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800049c:	d016      	beq.n	80004cc <GPIO_Init+0x138>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a66      	ldr	r2, [pc, #408]	@ (800063c <GPIO_Init+0x2a8>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d00f      	beq.n	80004c8 <GPIO_Init+0x134>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a64      	ldr	r2, [pc, #400]	@ (8000640 <GPIO_Init+0x2ac>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d008      	beq.n	80004c4 <GPIO_Init+0x130>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a63      	ldr	r2, [pc, #396]	@ (8000644 <GPIO_Init+0x2b0>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d101      	bne.n	80004c0 <GPIO_Init+0x12c>
 80004bc:	2307      	movs	r3, #7
 80004be:	e006      	b.n	80004ce <GPIO_Init+0x13a>
 80004c0:	2300      	movs	r3, #0
 80004c2:	e004      	b.n	80004ce <GPIO_Init+0x13a>
 80004c4:	2302      	movs	r3, #2
 80004c6:	e002      	b.n	80004ce <GPIO_Init+0x13a>
 80004c8:	2301      	movs	r3, #1
 80004ca:	e000      	b.n	80004ce <GPIO_Init+0x13a>
 80004cc:	2300      	movs	r3, #0
 80004ce:	757b      	strb	r3, [r7, #21]

		SYSCFG_PCLK_EN();
 80004d0:	4b5d      	ldr	r3, [pc, #372]	@ (8000648 <GPIO_Init+0x2b4>)
 80004d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004d4:	4a5c      	ldr	r2, [pc, #368]	@ (8000648 <GPIO_Init+0x2b4>)
 80004d6:	f043 0301 	orr.w	r3, r3, #1
 80004da:	6613      	str	r3, [r2, #96]	@ 0x60
		SYSCFG->SYSCFG_EXTICR[tempRegIndex] = (portCode << (4 * tempPosIndex));
 80004dc:	7d7a      	ldrb	r2, [r7, #21]
 80004de:	7dbb      	ldrb	r3, [r7, #22]
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	fa02 f103 	lsl.w	r1, r2, r3
 80004e6:	4a59      	ldr	r2, [pc, #356]	@ (800064c <GPIO_Init+0x2b8>)
 80004e8:	7dfb      	ldrb	r3, [r7, #23]
 80004ea:	3302      	adds	r3, #2
 80004ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. enable EXTI interrupt delivery using IMR (interrupt mask register); AKA enable EXTIx line interrupt delivery to NVIC
		EXTI->EXTI_IMR1 |= (0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 80004f0:	4b51      	ldr	r3, [pc, #324]	@ (8000638 <GPIO_Init+0x2a4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	7912      	ldrb	r2, [r2, #4]
 80004f8:	4611      	mov	r1, r2
 80004fa:	2201      	movs	r2, #1
 80004fc:	408a      	lsls	r2, r1
 80004fe:	4611      	mov	r1, r2
 8000500:	4a4d      	ldr	r2, [pc, #308]	@ (8000638 <GPIO_Init+0x2a4>)
 8000502:	430b      	orrs	r3, r1
 8000504:	6013      	str	r3, [r2, #0]
	}

	// 3. configure the output speed
	tempR = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinOpSpeed << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	799b      	ldrb	r3, [r3, #6]
 800050a:	461a      	mov	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	791b      	ldrb	r3, [r3, #4]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	fa02 f303 	lsl.w	r3, r2, r3
 8000516:	613b      	str	r3, [r7, #16]
	pGPIO_Handle->pGPIOx->OSPEEDR &= ~(0b11 << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));							// clearing
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	689a      	ldr	r2, [r3, #8]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	2103      	movs	r1, #3
 8000526:	fa01 f303 	lsl.w	r3, r1, r3
 800052a:	43db      	mvns	r3, r3
 800052c:	4619      	mov	r1, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	400a      	ands	r2, r1
 8000534:	609a      	str	r2, [r3, #8]
	pGPIO_Handle->pGPIOx->OSPEEDR |= tempR;																					// setting
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6899      	ldr	r1, [r3, #8]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	693a      	ldr	r2, [r7, #16]
 8000542:	430a      	orrs	r2, r1
 8000544:	609a      	str	r2, [r3, #8]

	// 4. configure the pull-up/ pull-down settings
	tempR = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinPUPD << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	7a1b      	ldrb	r3, [r3, #8]
 800054a:	461a      	mov	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	791b      	ldrb	r3, [r3, #4]
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	613b      	str	r3, [r7, #16]
	pGPIO_Handle->pGPIOx->PUPDR &= (0b11 << (2 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));								// clearing
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	68da      	ldr	r2, [r3, #12]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	2103      	movs	r1, #3
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	4619      	mov	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	400a      	ands	r2, r1
 8000572:	60da      	str	r2, [r3, #12]
	pGPIO_Handle->pGPIOx->PUPDR |= tempR;																					//setting
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	68d9      	ldr	r1, [r3, #12]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	693a      	ldr	r2, [r7, #16]
 8000580:	430a      	orrs	r2, r1
 8000582:	60da      	str	r2, [r3, #12]

	// 5. configure the output type
	tempR = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinOpType << (1 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	79db      	ldrb	r3, [r3, #7]
 8000588:	461a      	mov	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	613b      	str	r3, [r7, #16]
	pGPIO_Handle->pGPIOx->OTYPER &= (0b1 << (1 * pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber));
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	685a      	ldr	r2, [r3, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	791b      	ldrb	r3, [r3, #4]
 800059e:	4619      	mov	r1, r3
 80005a0:	2301      	movs	r3, #1
 80005a2:	408b      	lsls	r3, r1
 80005a4:	4619      	mov	r1, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	400a      	ands	r2, r1
 80005ac:	605a      	str	r2, [r3, #4]
	pGPIO_Handle->pGPIOx->OTYPER &= tempR;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	6859      	ldr	r1, [r3, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	693a      	ldr	r2, [r7, #16]
 80005ba:	400a      	ands	r2, r1
 80005bc:	605a      	str	r2, [r3, #4]

	// 6. configure the alternate functionality
	if (pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	795b      	ldrb	r3, [r3, #5]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d132      	bne.n	800062c <GPIO_Init+0x298>
		uint8_t tempRegIndex = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	791b      	ldrb	r3, [r3, #4]
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	73fb      	strb	r3, [r7, #15]
		uint8_t tempPinIndex = pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	73bb      	strb	r3, [r7, #14]

		tempR = (pGPIO_Handle->GPIO_PinConfig.GPIO_PinAltFun << (4 * tempPinIndex));
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7a5b      	ldrb	r3, [r3, #9]
 80005dc:	461a      	mov	r2, r3
 80005de:	7bbb      	ldrb	r3, [r7, #14]
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	613b      	str	r3, [r7, #16]
		pGPIO_Handle->pGPIOx->AFR[tempRegIndex] &= ~(0b1111 << (4 * tempPinIndex));				// setting
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	7bfa      	ldrb	r2, [r7, #15]
 80005ee:	3208      	adds	r2, #8
 80005f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	220f      	movs	r2, #15
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43db      	mvns	r3, r3
 8000600:	4618      	mov	r0, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	7bfa      	ldrb	r2, [r7, #15]
 8000608:	4001      	ands	r1, r0
 800060a:	3208      	adds	r2, #8
 800060c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIO_Handle->pGPIOx->AFR[tempRegIndex] |= tempR;										// clearing
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	7bfa      	ldrb	r2, [r7, #15]
 8000616:	3208      	adds	r2, #8
 8000618:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	7bfa      	ldrb	r2, [r7, #15]
 8000622:	6939      	ldr	r1, [r7, #16]
 8000624:	4301      	orrs	r1, r0
 8000626:	3208      	adds	r2, #8
 8000628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800062c:	bf00      	nop
 800062e:	371c      	adds	r7, #28
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	40010400 	.word	0x40010400
 800063c:	48000400 	.word	0x48000400
 8000640:	48000800 	.word	0x48000800
 8000644:	48001c00 	.word	0x48001c00
 8000648:	40021000 	.word	0x40021000
 800064c:	40010000 	.word	0x40010000

08000650 <GPIO_WriteToOutputPin>:
 * @param[in]	- value to be written
 * @return 		- none
 *
 * @note 		- none
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, bool Value){
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	460b      	mov	r3, r1
 800065a:	70fb      	strb	r3, [r7, #3]
 800065c:	4613      	mov	r3, r2
 800065e:	70bb      	strb	r3, [r7, #2]
	if (Value == GPIO_PIN_SET){
 8000660:	78bb      	ldrb	r3, [r7, #2]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d009      	beq.n	800067a <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (0b1 << PinNumber);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	78fa      	ldrb	r2, [r7, #3]
 800066c:	2101      	movs	r1, #1
 800066e:	fa01 f202 	lsl.w	r2, r1, r2
 8000672:	431a      	orrs	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	615a      	str	r2, [r3, #20]
	}
	else{
		pGPIOx->ODR &= ~(0b1 << PinNumber);
	}

}
 8000678:	e009      	b.n	800068e <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(0b1 << PinNumber);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	78fa      	ldrb	r2, [r7, #3]
 8000680:	2101      	movs	r1, #1
 8000682:	fa01 f202 	lsl.w	r2, r1, r2
 8000686:	43d2      	mvns	r2, r2
 8000688:	401a      	ands	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	615a      	str	r2, [r3, #20]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <GPIO_ToggleOutputPin>:
 * @param[in]	- pin number
 * @return 		- none
 *
 * @note 		- none
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint16_t PinNumber){
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	807b      	strh	r3, [r7, #2]
	pGPIOx->ODR ^= (0b1 << PinNumber);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	887a      	ldrh	r2, [r7, #2]
 80006aa:	2101      	movs	r1, #1
 80006ac:	fa01 f202 	lsl.w	r2, r1, r2
 80006b0:	405a      	eors	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	615a      	str	r2, [r3, #20]
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <GPIO_IRQInterruptConfig>:
 * return 		- none
 *
 * note 		- sets Interrupt Set-enable Register for ENABLE
 * 				- sets Interrupt Clear-enable Register for DISABLE
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, bool EnorDi){
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	460a      	mov	r2, r1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	71bb      	strb	r3, [r7, #6]
	// The NVIC_ISER registers enable interrupts

	if (EnorDi == ENABLE){
 80006d0:	79bb      	ldrb	r3, [r7, #6]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d01b      	beq.n	800070e <GPIO_IRQInterruptConfig+0x4e>
		// configure NVIC Interrupt Set-enable Register
		uint8_t tempReg = IRQNumber / 32;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	095b      	lsrs	r3, r3, #5
 80006da:	737b      	strb	r3, [r7, #13]
		uint8_t tempIndex = IRQNumber % 32;
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 031f 	and.w	r3, r3, #31
 80006e2:	733b      	strb	r3, [r7, #12]

		*(NVIC_ISER0 + tempReg) |= (0b1 << tempIndex);
 80006e4:	7b7b      	ldrb	r3, [r7, #13]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80006ec:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	7b3b      	ldrb	r3, [r7, #12]
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	4619      	mov	r1, r3
 80006fc:	7b7b      	ldrb	r3, [r7, #13]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000704:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000708:	430a      	orrs	r2, r1
 800070a:	601a      	str	r2, [r3, #0]
		uint8_t tempReg = IRQNumber / 32;
		uint8_t tempIndex = IRQNumber % 32;

		*(NVIC_ICER0 + tempReg) |= (0b1 << tempIndex);
	}
}
 800070c:	e016      	b.n	800073c <GPIO_IRQInterruptConfig+0x7c>
		uint8_t tempReg = IRQNumber / 32;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	095b      	lsrs	r3, r3, #5
 8000712:	73fb      	strb	r3, [r7, #15]
		uint8_t tempIndex = IRQNumber % 32;
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	f003 031f 	and.w	r3, r3, #31
 800071a:	73bb      	strb	r3, [r7, #14]
		*(NVIC_ICER0 + tempReg) |= (0b1 << tempIndex);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	009a      	lsls	r2, r3, #2
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <GPIO_IRQInterruptConfig+0x88>)
 8000722:	4413      	add	r3, r2
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	2101      	movs	r1, #1
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	4618      	mov	r0, r3
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	0099      	lsls	r1, r3, #2
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <GPIO_IRQInterruptConfig+0x88>)
 8000736:	440b      	add	r3, r1
 8000738:	4302      	orrs	r2, r0
 800073a:	601a      	str	r2, [r3, #0]
}
 800073c:	bf00      	nop
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e180 	.word	0xe000e180

0800074c <GPIO_IRQPriorityConfig>:
 * param[in] 	- IRQ Priority Number
 * return 		- none
 *
 * note 		- Interrupt Priority Registers
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	// The NVIC_IPR registers provide an 8-bit priority field for each interrupt and each register holds four priority fields
	// take care of how many interrupt priority bits are used

	uint8_t tempReg = IRQNumber / 4;
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	089b      	lsrs	r3, r3, #2
 8000760:	73fb      	strb	r3, [r7, #15]
	uint8_t tempIndex = IRQNumber % 4;
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	f003 0303 	and.w	r3, r3, #3
 8000768:	73bb      	strb	r3, [r7, #14]

	*(NVIC_IPR0 + tempReg) |= ((uint32_t)(IRQPriority << (8 - M4_NO_PR_BITS_IMPLEMENTED)) << (8 * tempIndex));
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000772:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 8000776:	6819      	ldr	r1, [r3, #0]
 8000778:	79bb      	ldrb	r3, [r7, #6]
 800077a:	011a      	lsls	r2, r3, #4
 800077c:	7bbb      	ldrb	r3, [r7, #14]
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	409a      	lsls	r2, r3
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800078a:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800078e:	430a      	orrs	r2, r1
 8000790:	601a      	str	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <GPIO_IRQHandling>:
 * param[in] 	- Pin Number
 * return 		- none
 *
 * note 		- none
 */
void GPIO_IRQHandling(uint8_t PinNumber){
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	// also refer REFERENCE MANUAL (EXTI lines connections)

	if (EXTI->EXTI_PR1 & (0b1 << PinNumber)){
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <GPIO_IRQHandling+0x3c>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	79fa      	ldrb	r2, [r7, #7]
 80007ac:	2101      	movs	r1, #1
 80007ae:	fa01 f202 	lsl.w	r2, r1, r2
 80007b2:	4013      	ands	r3, r2
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d009      	beq.n	80007cc <GPIO_IRQHandling+0x30>
		// if Selected trigger request occurred, clear it

		EXTI->EXTI_PR1 |= (0b1 << PinNumber);
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <GPIO_IRQHandling+0x3c>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	2101      	movs	r1, #1
 80007c0:	fa01 f202 	lsl.w	r2, r1, r2
 80007c4:	4611      	mov	r1, r2
 80007c6:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <GPIO_IRQHandling+0x3c>)
 80007c8:	430b      	orrs	r3, r1
 80007ca:	6153      	str	r3, [r2, #20]
	}
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	40010400 	.word	0x40010400

080007dc <memset>:
 80007dc:	4402      	add	r2, r0
 80007de:	4603      	mov	r3, r0
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d100      	bne.n	80007e6 <memset+0xa>
 80007e4:	4770      	bx	lr
 80007e6:	f803 1b01 	strb.w	r1, [r3], #1
 80007ea:	e7f9      	b.n	80007e0 <memset+0x4>

080007ec <__libc_init_array>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000824 <__libc_init_array+0x38>)
 80007f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000828 <__libc_init_array+0x3c>)
 80007f2:	1b64      	subs	r4, r4, r5
 80007f4:	10a4      	asrs	r4, r4, #2
 80007f6:	2600      	movs	r6, #0
 80007f8:	42a6      	cmp	r6, r4
 80007fa:	d109      	bne.n	8000810 <__libc_init_array+0x24>
 80007fc:	4d0b      	ldr	r5, [pc, #44]	@ (800082c <__libc_init_array+0x40>)
 80007fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000830 <__libc_init_array+0x44>)
 8000800:	f000 f818 	bl	8000834 <_init>
 8000804:	1b64      	subs	r4, r4, r5
 8000806:	10a4      	asrs	r4, r4, #2
 8000808:	2600      	movs	r6, #0
 800080a:	42a6      	cmp	r6, r4
 800080c:	d105      	bne.n	800081a <__libc_init_array+0x2e>
 800080e:	bd70      	pop	{r4, r5, r6, pc}
 8000810:	f855 3b04 	ldr.w	r3, [r5], #4
 8000814:	4798      	blx	r3
 8000816:	3601      	adds	r6, #1
 8000818:	e7ee      	b.n	80007f8 <__libc_init_array+0xc>
 800081a:	f855 3b04 	ldr.w	r3, [r5], #4
 800081e:	4798      	blx	r3
 8000820:	3601      	adds	r6, #1
 8000822:	e7f2      	b.n	800080a <__libc_init_array+0x1e>
 8000824:	0800084c 	.word	0x0800084c
 8000828:	0800084c 	.word	0x0800084c
 800082c:	0800084c 	.word	0x0800084c
 8000830:	08000850 	.word	0x08000850

08000834 <_init>:
 8000834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000836:	bf00      	nop
 8000838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083a:	bc08      	pop	{r3}
 800083c:	469e      	mov	lr, r3
 800083e:	4770      	bx	lr

08000840 <_fini>:
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000842:	bf00      	nop
 8000844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000846:	bc08      	pop	{r3}
 8000848:	469e      	mov	lr, r3
 800084a:	4770      	bx	lr
