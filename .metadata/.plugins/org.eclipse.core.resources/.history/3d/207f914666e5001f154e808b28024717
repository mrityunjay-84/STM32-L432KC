/*
 * 007spi_master_slave.c
 *
 *  Created on: Feb 7, 2025
 *      Author: mrityunjay
 */



#include "nucleo-l432kc.h"

/* MASTER
 * SPI1_NSS		PA4		A3
 * API1_SCLK	PA5		A4
 * SPI1_MISO	PA6		A5
 * SPI1_MOSI	PA7		A6
 * alternate functionality mode 	5
 */

/* SLAVE
 * SPI3_NSS		PA15	NA
 * SPI3_SCLK	PB3		D13
 * SPI3_MISO	PB4		D12
 * SPI3_MOSI	PB5		D11
 */

/* SOFTWARE DELAY */
void delay(){
	for (uint32_t i = 0; i < 0xFFFF; i++);
}

void SPI_GPIOConfig(){
//	GPIO_Handle_t SPI1Pins;

//	SPI1Pins.pGPIOx = GPIOA;
//	SPI1Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
//	SPI1Pins.GPIO_PinConfig.GPIO_PinOpSpeed = GPIO_OPSPEED_LOW;
//	SPI1Pins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OPTYPE_PUSHPULL;
//	SPI1Pins.GPIO_PinConfig.GPIO_PinPUPD = GPIO_PUPD_NOPUPD;
//	SPI1Pins.GPIO_PinConfig.GPIO_PinAltFun = GPIO_ALTFUN_5;

	// enable clock to GPIO port A
//	GPIO_PeriClockControl(GPIOA, ENABLE);

	// NSS Pin
//	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_4;
//	GPIO_Init(&SPI1Pins);

	// SCLK Pin
//	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_5;
//	GPIO_Init(&SPI1Pins);
//
//	// MISO Pin
//	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_6;
//	GPIO_Init(&SPI1Pins);
//
//	// MOSI Pin
//	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_7;
//	GPIO_Init(&SPI1Pins);



	GPIO_Handle_t SPI2Pins;

	SPI2Pins.pGPIOx = GPIOB;
	SPI2Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	SPI2Pins.GPIO_PinConfig.GPIO_PinOpSpeed = GPIO_OPSPEED_LOW;
	SPI2Pins.GPIO_PinConfig.GPIO_PinOpType = GPIO_OPTYPE_PUSHPULL;
	SPI2Pins.GPIO_PinConfig.GPIO_PinPUPD = GPIO_PUPD_NOPUPD;
	SPI2Pins.GPIO_PinConfig.GPIO_PinAltFun = GPIO_ALTFUN_6;

	// enable clock to GPIO port A
	GPIO_PeriClockControl(GPIOB, ENABLE);

	// NSS Pin -> deliberately SPI1Pins bcz it is present on PA15
//	SPI1Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_15;
//	GPIO_Init(&SPI1Pins);

	// SCLK Pin
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_3;
	GPIO_Init(&SPI2Pins);

	// MISO Pin
//	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_4;
//	GPIO_Init(&SPI2Pins);

	// MOSI Pin
	SPI2Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_NO_5;
	GPIO_Init(&SPI2Pins);
}

void SPI_Config(void){
//	SPI_Handle_t SPI_Handle1;
//
//	SPI_Handle1.pSPIx = SPI1;
//	SPI_Handle1.SPI_PinConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
//	SPI_Handle1.SPI_PinConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL_DUPLX;
//	SPI_Handle1.SPI_PinConfig.SPI_DS = SPI_DS_8_BIT;
//	SPI_Handle1.SPI_PinConfig.SPI_CPHA = SPI_CPHA_LOW;
//	SPI_Handle1.SPI_PinConfig.SPI_CPOL = SPI_CPOL_LOW;
//	SPI_Handle1.SPI_PinConfig.SPI_SSM = SPI_SSM_EN;
//	SPI_Handle1.SPI_PinConfig.SPI_BDRCtrl = SPI_BDR_CTRL_DIV_2;
//
//	// enable clock to SPI1 peripheral
//	SPI_PeriClockControl(SPI1, ENABLE);
//
//	SPI_Init(&SPI_Handle1);



	SPI_Handle_t SPI_Handle2;

	SPI_Handle2.pSPIx = SPI3;
	SPI_Handle2.SPI_PinConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
	SPI_Handle2.SPI_PinConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL_DUPLX;
	SPI_Handle2.SPI_PinConfig.SPI_DS = SPI_DS_8_BIT;
	SPI_Handle2.SPI_PinConfig.SPI_CPHA = SPI_CPHA_LOW;
	SPI_Handle2.SPI_PinConfig.SPI_CPOL = SPI_CPOL_LOW;
	SPI_Handle2.SPI_PinConfig.SPI_SSM = SPI_SSM_EN;
	SPI_Handle2.SPI_PinConfig.SPI_BDRCtrl = SPI_BDR_CTRL_DIV_2;

	// enable clock to SPI1 peripheral
	SPI_PeriClockControl(SPI3, ENABLE);

	SPI_Init(&SPI_Handle2);

}

int main(void)
{
//	uint8_t dummyWrite = 0x11;
//	uint8_t dummyRead;
//	uint8_t MasterSend = 0x4d;	// M
	uint8_t SlaveSend = 0x53;	// S

	// configure the GPIO pins to behave as SPI pins
	SPI_GPIOConfig();

	// configure the parameter of SPI1 peripheral and SPI2 Peripheral
	SPI_Config();

	// SET SSI bit of SPI1, avoid MODF error
//	SPI_SSIConfig(SPI1, ENABLE);

	// RESET SSI bit of SPI3
	SPI_SSIConfig(SPI3, ENABLE);

	while(1){
		delay();

		// enable the SPI1 peripheral
//		SPI_PeripheralControl(SPI1, ENABLE);

		// enable the SPI3 peripheral
		SPI_PeripheralControl(SPI3, ENABLE);





//		SPI_SendData(SPI1, &MasterSend, 1);
//		SPI_ReceiveData(SPI1, &dummyRead, 1);
//
//		SPI_ReceiveData(SPI3, &dummyRead, 1);
		SPI_SendData(SPI3, &SlaveSend, 1);


//		SPI_SendData(SPI1, &dummyWrite, 1);
//		SPI_ReceiveData(SPI1, &dummyRead, 1);


//		SPI_SendData(SPI3, &SlaveSend, 1);
//
//		SPI_ReceiveData(SPI3, &dummyRead, 1);
//		SPI_ReceiveData(SPI1, &dummyRead, 1);

		// MASTER

//		uint8_t length = strlen(userData);
//
//		SPI_SendData(SPI1, &length, 1);
//		SPI_SendData(SPI1, (uint8_t *)userData, strlen(userData));
//
//		//lets confirm SPI is not busy
//		while(SPI_GetFlagStatus(SPI1,SPI_BUSY_FLAG));
//
//		//Disable the SPI2 peripheral
//		SPI_PeripheralControl(SPI1,DISABLE);
	}
}

